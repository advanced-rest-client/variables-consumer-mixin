{
  "schema_version": "1.0.0",
  "mixins": [
    {
      "description": "A mixin to be used with elements that consumes variables and environments\nstate. Contains all methods and listeners to kee variables and environments\nup to date.",
      "summary": "",
      "path": "variables-consumer-mixin.js",
      "properties": [
        {
          "name": "environment",
          "type": "string | null | undefined",
          "description": "Currently activated environment.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 35,
              "column": 8
            },
            "end": {
              "line": 38,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "String"
            }
          }
        },
        {
          "name": "environments",
          "type": "Array.<Object>",
          "description": "List of all available environments.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 43,
              "column": 8
            },
            "end": {
              "line": 43,
              "column": 49
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "variables",
          "type": "Array.<Object>",
          "description": "List of available variables for the environment.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 48,
              "column": 8
            },
            "end": {
              "line": 48,
              "column": 46
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "hasVariables",
          "type": "boolean | null | undefined",
          "description": "Computed value, true if variables are available for current\nenvironment.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 53,
              "column": 8
            },
            "end": {
              "line": 58,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "hasEnvironments",
          "type": "boolean | null | undefined",
          "description": "Computed value, true if there's a list of environments set.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 62,
              "column": 8
            },
            "end": {
              "line": 67,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "noAuthoLoad",
          "type": "boolean | null | undefined",
          "description": "When set variables are not set automatically when element\nis attached to the DOM.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 72,
              "column": 8
            },
            "end": {
              "line": 72,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 88,
              "column": 4
            },
            "end": {
              "line": 101,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 103,
              "column": 4
            },
            "end": {
              "line": 113,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_dispatch",
          "description": "Dispatches bubbling and composed custom event.\nBy default the event is cancelable until `cancelable` property is set to false.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 122,
              "column": 4
            },
            "end": {
              "line": 134,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Event type"
            },
            {
              "name": "detail",
              "type": "?any",
              "description": "A detail to set"
            },
            {
              "name": "cancelable",
              "type": "?Boolean",
              "description": "When false the event is not cancelable."
            }
          ],
          "return": {
            "type": "CustomEvent"
          }
        },
        {
          "name": "_dataImportHandler",
          "description": "Handler for `data-imported` cutom event.\nRefreshes environments list.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 141,
              "column": 4
            },
            "end": {
              "line": 144,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_onDatabaseDestroy",
          "description": "Handler for the `datastore-destroyed` custom event.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 151,
              "column": 4
            },
            "end": {
              "line": 170,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True if scheduled refresh flow."
          }
        },
        {
          "name": "_initializeVariables",
          "description": "Asks variables manager for current environment and variables.\n\nNote, At the moment of initialization the manager may not be in the DOM.\nIn this case the initialization fails. However, when the manager is\ninitialized it dispatched events to update variables and environments.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 179,
              "column": 4
            },
            "end": {
              "line": 186,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "refreshState",
          "description": "Refreshes list of variables and current environment.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 192,
              "column": 4
            },
            "end": {
              "line": 207,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "noThrows",
              "type": "Boolean",
              "description": "When set it does not throw error when model is\nnot found."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "refreshEnvironments",
          "description": "Refreshes list of environments.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 212,
              "column": 4
            },
            "end": {
              "line": 223,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_computeHasVariables",
          "description": "Computes `hasVariables` property.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 229,
              "column": 4
            },
            "end": {
              "line": 231,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "length",
              "type": "Number"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True if list is not empty."
          }
        },
        {
          "name": "_computeHasEnvs",
          "description": "Computes `hasEnvironments` property.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 237,
              "column": 4
            },
            "end": {
              "line": 239,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "length",
              "type": "Number"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True if list is not empty."
          }
        },
        {
          "name": "_envChangedHandler",
          "description": "Removes variables and updates environment.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 244,
              "column": 4
            },
            "end": {
              "line": 251,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_varListChangedHandler",
          "description": "Handler for the `variables-list-changed` event.\nSets list of the variables.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 258,
              "column": 4
            },
            "end": {
              "line": 268,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_varUpdateHandler",
          "description": "Handler for `variable-updated` event. Updates variable in the list\nif it is on it or adds it otherwise.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 274,
              "column": 4
            },
            "end": {
              "line": 293,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_varDeleteHandler",
          "description": "Handler for `variable-deleted` event. Removes variable from the list\nif it is on it.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 299,
              "column": 4
            },
            "end": {
              "line": 309,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_getVariableIndex",
          "description": "Finds variable index on the variables list.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 315,
              "column": 4
            },
            "end": {
              "line": 321,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "PouchDB data id"
            }
          ],
          "return": {
            "type": "Number",
            "desc": "Variable index or -1."
          }
        },
        {
          "name": "_envDeleteHandler",
          "description": "Handler for non-cancelable `environment-deleted` event.\nRemoves environment if it exists on the list.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 327,
              "column": 4
            },
            "end": {
              "line": 340,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_envUpdateHandler",
          "description": "Handler for non-cancelable `environment-updated` event.\nUpdates / adds environment to the list.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 346,
              "column": 4
            },
            "end": {
              "line": 363,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 24,
          "column": 7
        },
        "end": {
          "line": 366,
          "column": 3
        }
      },
      "privacy": "public",
      "name": "ArcComponents.VariablesConsumerMixin",
      "attributes": [
        {
          "name": "environment",
          "description": "Currently activated environment.",
          "sourceRange": {
            "start": {
              "line": 35,
              "column": 8
            },
            "end": {
              "line": 38,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "environments",
          "description": "List of all available environments.",
          "sourceRange": {
            "start": {
              "line": 43,
              "column": 8
            },
            "end": {
              "line": 43,
              "column": 49
            }
          },
          "metadata": {},
          "type": "Array.<Object>"
        },
        {
          "name": "variables",
          "description": "List of available variables for the environment.",
          "sourceRange": {
            "start": {
              "line": 48,
              "column": 8
            },
            "end": {
              "line": 48,
              "column": 46
            }
          },
          "metadata": {},
          "type": "Array.<Object>"
        },
        {
          "name": "has-variables",
          "description": "Computed value, true if variables are available for current\nenvironment.",
          "sourceRange": {
            "start": {
              "line": 53,
              "column": 8
            },
            "end": {
              "line": 58,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "has-environments",
          "description": "Computed value, true if there's a list of environments set.",
          "sourceRange": {
            "start": {
              "line": 62,
              "column": 8
            },
            "end": {
              "line": 67,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "no-autho-load",
          "description": "When set variables are not set automatically when element\nis attached to the DOM.",
          "sourceRange": {
            "start": {
              "line": 72,
              "column": 8
            },
            "end": {
              "line": 72,
              "column": 28
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    }
  ]
}
